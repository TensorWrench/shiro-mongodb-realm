/*
Copyright 2013 TensorWrench, LLC 

Licensed under the Apache License, Version 2.0 (the "License"); 
you may not use this file except in compliance with the License. 
You may obtain a copy of the License at 

http://www.apache.org/licenses/LICENSE-2.0 

Unless required by applicable law or agreed to in writing, software 
distributed under the License is distributed on an "AS IS" BASIS, 
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
See the License for the specific language governing permissions and 
limitations under the License.
*/
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'pmd'
apply from:"file:src/gradle/backgroundTask.gradle"
apply plugin: 'signing'
apply plugin: 'maven'
apply plugin: 'emma'
//===============================================
// Project settings
//===============================================
ext {
	testngVersion='6.8'	
	mongoDir=new File("$buildDir/mongo-data");
  mongoDriverVersion='2.11.+'
	shiroVersion='1.2.+'
}

version = projectVersion
group = projectGroup
sourceCompatibility = 1.7

//===============================================
// Build Tools
//===============================================
buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath "com.tensorwrench.gradle:gradle-emma-plugin:+"
	}
}

//===============================================
// Dependency info
//===============================================
repositories {
	mavenLocal()
  mavenCentral()
}

dependencies {
	compile(
		"org.mongodb:mongo-java-driver:${mongoDriverVersion}"
		,"org.apache.shiro:shiro-core:${shiroVersion}"
  )		
	
	testCompile(
		"org.testng:testng:${testngVersion}"
		,"com.tensorwrench.testng:mongodb-testng:+"
	)
}

//===============================================
// Project Overhead
//===============================================
task wrapper(type: Wrapper) {
	gradleVersion="1.8"
}

eclipse.classpath {
	downloadJavadoc = true
	downloadSources = true
	defaultOutputDir = file("$buildDir/build-eclipse")
}

//===============================================
// Documentation
//===============================================

javadoc {
	source=sourceSets.main.allJava
	destinationDir = reporting.file("javadocs")
}

//===============================================
// Testing
//===============================================
test {
	useTestNG()
}
test.dependsOn "startMongoDB"

//==========================================================================
// Artifact Information
//==========================================================================
jar {
	manifest {
		attributes 'Title': projectTitle,
				       'Version': version
	}
}

task sourcesJar(type: Jar, dependsOn:classes) {
	classifier = 'sources'
	from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}

artifacts {
	archives(sourcesJar)
	archives(javadocJar)
}

signing { sign configurations.archives }

def customizePom(pom) {
	pom.project {
		packaging "jar"
		name projectTitle
		description projectDescription
		url projectGithubUrl
		scm {
			connection "scm:git:${projectGithubUrl}"
			url projectGithubUrl
		}
		developers {
			developer {
				id "jason"
				name "Jason Wagner"
			}
		}
		licenses {
				license {
						name 'The Apache Software License, Version 2.0'
						url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
						distribution 'repo'
				}
		}
	}
}

install {
	repositories.mavenInstaller {
		pom.groupId = project.group
    customizePom(pom)
	}
}

uploadArchives {
	repositories {
		mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: sonatypeUsername, password: sonatypePassword)
			}

			pom.groupId = project.group
			customizePom(pom)
		}
	}
}

//==========================================================================
// Setup mongodb

backgroundTask {
	processName="MongoDB"
	group='Mongo'
	commandLine=["mongod","--dbpath",mongoDir.getCanonicalPath()];
	workDir=mongoDir
}
